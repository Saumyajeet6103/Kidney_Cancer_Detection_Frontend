import { NodeOptions } from './types';
export declare function hookOutput(writer: 'stdout' | 'stderr', callback: (buffer: string) => void): () => void;
declare const ConsoleLevels: {
    readonly debug: "debug";
    readonly info: "info";
    readonly log: "info";
    readonly count: "info";
    readonly dir: "info";
    readonly warn: "warn";
    readonly assert: "warn";
    readonly error: "error";
    readonly trace: "trace";
};
interface ConsolePayload {
    date: Date;
    level: keyof typeof ConsoleLevels;
    message: string;
    stack: object;
    attributes?: {
        [key: string]: any;
    };
}
export declare function safeStringify(obj: any): string;
export declare function hookConsole(options: NodeOptions, cb: (cb: ConsolePayload) => void): void;
export {};
//# sourceMappingURL=hooks.d.ts.map