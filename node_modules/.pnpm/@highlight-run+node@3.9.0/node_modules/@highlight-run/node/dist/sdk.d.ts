/// <reference types="node" />
import { IncomingHttpHeaders } from 'http';
import { Highlight } from './client';
import { ResourceAttributes } from '@opentelemetry/resources';
import type { HighlightContext, NodeOptions } from './types.js';
import { Attributes, Context, Span as OtelSpan, SpanOptions } from '@opentelemetry/api';
export declare const HIGHLIGHT_REQUEST_HEADER = "x-highlight-request";
export interface HighlightInterface {
    init: (options: NodeOptions) => Highlight;
    stop: () => Promise<void>;
    isInitialized: () => boolean;
    parseHeaders: (headers: Headers | IncomingHttpHeaders) => HighlightContext;
    runWithHeaders: <T>(headers: Headers | IncomingHttpHeaders, cb: (span: OtelSpan) => T | Promise<T>) => Promise<T>;
    startWithHeaders: (name: string, headers: Headers | IncomingHttpHeaders, options: SpanOptions) => {
        span: OtelSpan;
        ctx: Context;
    };
    consumeError: (error: Error, secureSessionId?: string, requestId?: string, metadata?: Attributes, options?: {
        span: OtelSpan;
    }) => void;
    recordMetric: (secureSessionId: string, name: string, value: number, requestId?: string, tags?: {
        name: string;
        value: string;
    }[]) => void;
    flush: () => Promise<void>;
    log: (message: any, level: string, secureSessionId?: string | undefined, requestId?: string | undefined, metadata?: Attributes) => void;
    consumeAndFlush: (error: Error, secureSessionId?: string, requestId?: string, metadata?: Attributes) => Promise<void>;
    setAttributes: (attributes: ResourceAttributes) => void;
    startActiveSpan: (name: string, options: SpanOptions) => Promise<OtelSpan>;
    _debug: (...data: any[]) => void;
}
export declare const H: HighlightInterface;
//# sourceMappingURL=sdk.d.ts.map