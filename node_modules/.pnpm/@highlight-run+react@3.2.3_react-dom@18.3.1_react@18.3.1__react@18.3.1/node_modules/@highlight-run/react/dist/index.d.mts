import React, { ErrorInfo } from 'react';

interface ReportDialogOptions {
    user?: {
        email?: string;
        name?: string;
    };
    title?: string;
    subtitle?: string;
    labelName?: string;
    subtitle2?: string;
    labelEmail?: string;
    labelComments?: string;
    placeholderComments?: string;
    labelClose?: string;
    labelSubmit?: string;
    successMessage?: string;
    successSubtitle?: string;
    hideHighlightBranding?: boolean;
    error?: Error;
}
type ReportDialogProps = ReportDialogOptions & {
    onCloseHandler?: () => void;
    onSubmitHandler?: () => void;
};
declare function ReportDialog({ labelClose, labelComments, labelName, labelEmail, labelSubmit, subtitle2, subtitle, successMessage, successSubtitle, title, placeholderComments, user, onCloseHandler, onSubmitHandler, hideHighlightBranding, error, }: ReportDialogProps): React.JSX.Element;

type FallbackRender = (errorData: {
    error: Error;
    componentStack: string | null;
    resetError(): void;
}) => React.ReactElement;
type ErrorBoundaryProps = {
    children?: React.ReactNode;
    /** If a Highlight report dialog should be rendered on error. Defaults to true. */
    showDialog?: boolean;
    /** A custom dialog that you can provide to be shown when the ErrorBoundary is shown. */
    customDialog?: React.ReactNode;
    /**
     * Options to be passed into the Highlight report dialog.
     * No-op if {@link showDialog} is false.
     */
    dialogOptions?: ReportDialogOptions;
    /**
     * A fallback component that gets rendered when the error boundary encounters an error.
     *
     * Can either provide a React Component, or a function that returns React Component as
     * a valid fallback prop. If a function is provided, the function will be called with
     * the error, the component stack, and an function that resets the error boundary on error.
     *
     */
    fallback?: React.ReactElement | FallbackRender;
    /** Called when the error boundary encounters an error */
    onError?(error: Error, componentStack: string): void;
    /** Called on componentDidMount() */
    onMount?(): void;
    /** Called if resetError() is called from the fallback render props function  */
    onReset?(error: Error | null, componentStack: string | null): void;
    /** Called on componentWillUnmount() */
    onUnmount?(error: Error | null, componentStack: string | null): void;
    /** Called before the error is captured by Highlight, allows for you to add tags or context using the scope */
    beforeCapture?(error: Error | null, componentStack: string | null): void;
    /** Called after the report dialog's cancel button has been activated. */
    onAfterReportDialogCancelHandler?: () => void;
    /** Called after the report dialog's submit button has been activated. */
    onAfterReportDialogSubmitHandler?: () => void;
};
interface ErrorBoundaryState {
    componentStack: string | null;
    error: Error | null;
    showingDialog: boolean;
}
declare class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
    state: ErrorBoundaryState;
    componentDidCatch(error: Error, errorInfo: ErrorInfo): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    resetErrorBoundary: () => void;
    hideDialog: () => void;
    onReportDialogSubmitHandler: () => void;
    render(): any;
}

declare const SampleBuggyButton: ({ children, }: React.PropsWithChildren<{}>) => React.JSX.Element;

export { ErrorBoundary, type ErrorBoundaryProps, type FallbackRender, ReportDialog, type ReportDialogOptions, SampleBuggyButton };
