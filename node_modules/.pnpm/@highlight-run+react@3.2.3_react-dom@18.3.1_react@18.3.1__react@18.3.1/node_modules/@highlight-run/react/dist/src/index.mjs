var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    "use strict";
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames() {
        var classes = "";
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (arg) {
            classes = appendClass(classes, parseValue(arg));
          }
        }
        return classes;
      }
      function parseValue(arg) {
        if (typeof arg === "string" || typeof arg === "number") {
          return arg;
        }
        if (typeof arg !== "object") {
          return "";
        }
        if (Array.isArray(arg)) {
          return classNames.apply(null, arg);
        }
        if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
          return arg.toString();
        }
        var classes = "";
        for (var key in arg) {
          if (hasOwn.call(arg, key) && arg[key]) {
            classes = appendClass(classes, key);
          }
        }
        return classes;
      }
      function appendClass(value, newClass) {
        if (!newClass) {
          return value;
        }
        if (value) {
          return value + " " + newClass;
        }
        return value + newClass;
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames;
        });
      } else {
        window.classNames = classNames;
      }
    })();
  }
});

// src/components/ErrorBoundary.tsx
import React2 from "react";

// src/components/ReportDialog/ReportDialog.tsx
var import_classnames = __toESM(require_classnames());
import React, { useMemo, useRef, useState } from "react";

// src/components/ReportDialog/styles.module.css
var styles_default = {};

// src/components/ReportDialog/ReportDialog.tsx
function ReportDialog({
  labelClose = "Cancel",
  labelComments = "Message",
  labelName = "Name",
  labelEmail = "Email",
  labelSubmit = "Submit",
  subtitle2 = "If you\u2019d like to help, tell us what happened below.",
  subtitle = "Our team has been notified.",
  successMessage = "Your feedback has been sent. Thank you!",
  successSubtitle = "Thank you for sending us feedback. If you have any other concerns/questions, reach out to this application's support email.",
  title = "It looks like we\u2019re having issues.",
  placeholderComments = "I typed in a name then clicked the button",
  user,
  onCloseHandler,
  onSubmitHandler,
  hideHighlightBranding = false,
  error
}) {
  const [name, setName] = useState((user == null ? void 0 : user.name) || "");
  const [email, setEmail] = useState((user == null ? void 0 : user.email) || "");
  const [verbatim, setVerbatim] = useState("");
  const [sendingReport, setSendingReport] = useState(false);
  const [sentReport, setSentReport] = useState(false);
  const reportDialogOpenTime = useRef((/* @__PURE__ */ new Date()).toISOString());
  const isValid = useMemo(() => {
    const isValidEmail = !!email.match(
      /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i
    );
    return !!name && isValidEmail && !!verbatim;
  }, [name, email, verbatim]);
  React.useEffect(() => {
    var _a;
    if (((_a = window == null ? void 0 : window.H) == null ? void 0 : _a.consumeError) && error) {
      window.H.consumeError(error);
    }
  }, [error]);
  const handleSubmit = (event) => {
    var _a;
    event.preventDefault();
    setSendingReport(true);
    if ((_a = window == null ? void 0 : window.H) == null ? void 0 : _a.addSessionFeedback) {
      window.H.addSessionFeedback({
        verbatim,
        userName: name,
        userEmail: email,
        timestampOverride: reportDialogOpenTime.current
      });
    } else {
      console.warn(
        "Highlight is not initialized. Make sure highlight.run is installed and running."
      );
    }
    new Promise((r) => window.setTimeout(r, 300)).then(() => {
      setSendingReport(false);
      setSentReport(true);
      if (onSubmitHandler) {
        onSubmitHandler();
      }
    });
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    "style",
    {
      dangerouslySetInnerHTML: {
        __html: `
					@font-face {
						font-display: swap;
						font-family: 'Inter';
						font-style: normal;
						font-weight: normal;
						src: local('Inter Regular'), local('InterRegular'),
							url('https://app.highlight.io/font/Inter-Regular.woff2')
								format('woff2');
					}
					@font-face {
						font-display: swap;
						font-family: 'Inter';
						font-style: normal;
						font-weight: 500;
						src: local('Inter Medium'), local('InterMedium'),
							url('https://app.highlight.io/font/Inter-Medium.woff2')
								format('woff2');
					}

					::placeholder {
						color: var(--color-gray-300);
					}
			`
      }
    }
  ), /* @__PURE__ */ React.createElement("main", { className: styles_default.container }, /* @__PURE__ */ React.createElement("div", { className: styles_default.card }, sentReport ? /* @__PURE__ */ React.createElement("div", { className: styles_default.cardContents }, /* @__PURE__ */ React.createElement("h1", { className: styles_default.title }, successMessage), /* @__PURE__ */ React.createElement("h4", { className: styles_default.subtitle }, successSubtitle), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(
    "button",
    {
      className: (0, import_classnames.default)(
        styles_default.button,
        styles_default.confirmationButton
      ),
      onClick: onCloseHandler
    },
    "Close"
  ))) : /* @__PURE__ */ React.createElement("div", { className: styles_default.cardContents }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("h1", { className: styles_default.title }, title), /* @__PURE__ */ React.createElement("h2", { className: styles_default.subtitle }, subtitle, " ", subtitle2)), /* @__PURE__ */ React.createElement(
    "form",
    {
      className: styles_default.form,
      onSubmit: handleSubmit
    },
    /* @__PURE__ */ React.createElement("label", null, labelName, /* @__PURE__ */ React.createElement(
      "input",
      {
        type: "text",
        value: name,
        name: "name",
        autoFocus: true,
        onChange: (e) => {
          setName(e.target.value);
        },
        placeholder: "Tom Jerry"
      }
    )),
    /* @__PURE__ */ React.createElement("label", null, labelEmail, /* @__PURE__ */ React.createElement(
      "input",
      {
        type: "email",
        value: email,
        name: "email",
        onChange: (e) => {
          setEmail(e.target.value);
        },
        placeholder: "mail@mail.com"
      }
    )),
    /* @__PURE__ */ React.createElement("label", { className: styles_default.textareaLabel }, labelComments, /* @__PURE__ */ React.createElement(
      "textarea",
      {
        value: verbatim,
        placeholder: placeholderComments,
        name: "verbatim",
        rows: 3,
        onChange: (e) => {
          setVerbatim(e.target.value);
        }
      }
    )),
    /* @__PURE__ */ React.createElement("div", { className: styles_default.formFooter }, /* @__PURE__ */ React.createElement(
      "div",
      {
        className: styles_default.formActionsContainer
      },
      /* @__PURE__ */ React.createElement(
        "button",
        {
          type: "submit",
          disabled: !isValid || sendingReport
        },
        labelSubmit
      ),
      /* @__PURE__ */ React.createElement(
        "button",
        {
          className: styles_default.closeButton,
          onClick: onCloseHandler,
          type: "button"
        },
        labelClose
      )
    ), !hideHighlightBranding && /* @__PURE__ */ React.createElement("div", { className: styles_default.ad }, /* @__PURE__ */ React.createElement(
      "a",
      {
        href: "https://highlight.io",
        target: "_blank"
      },
      /* @__PURE__ */ React.createElement(
        "div",
        {
          className: styles_default.logoContainer
        },
        /* @__PURE__ */ React.createElement(
          "img",
          {
            src: "https://www.highlight.io/images/logo-on-dark.png",
            alt: "Highlight",
            className: styles_default.logo
          }
        ),
        /* @__PURE__ */ React.createElement("span", null, "Powered by highlight.io")
      )
    )))
  )))));
}

// src/components/ErrorBoundary.tsx
var INITIAL_STATE = {
  componentStack: null,
  error: null,
  showingDialog: false
};
var ErrorBoundary = class extends React2.Component {
  constructor() {
    super(...arguments);
    this.state = INITIAL_STATE;
    this.resetErrorBoundary = () => {
      const { onReset } = this.props;
      const { error, componentStack } = this.state;
      if (onReset) {
        onReset(error, componentStack);
      }
      this.setState(INITIAL_STATE);
    };
    this.hideDialog = () => {
      this.setState(__spreadProps(__spreadValues({}, this.state), { showingDialog: false }));
      (this.props.onAfterReportDialogCancelHandler || (() => {
        window.location.href = window.location.origin;
      }))();
    };
    this.onReportDialogSubmitHandler = () => {
      if (this.props.onAfterReportDialogSubmitHandler) {
        this.props.onAfterReportDialogSubmitHandler();
      }
    };
  }
  componentDidCatch(error, errorInfo) {
    var _a, _b, _c;
    const { beforeCapture, onError, showDialog } = this.props;
    if (beforeCapture) {
      beforeCapture(error, (_a = errorInfo.componentStack) != null ? _a : null);
    }
    captureReactErrorBoundaryError(error, errorInfo);
    if (onError) {
      onError(error, (_b = errorInfo.componentStack) != null ? _b : "");
    }
    if (showDialog !== false) {
      this.setState(__spreadProps(__spreadValues({}, this.state), { showingDialog: true }));
    }
    this.setState({
      error,
      componentStack: (_c = errorInfo.componentStack) != null ? _c : null
    });
  }
  componentDidMount() {
    const { onMount } = this.props;
    if (onMount) {
      onMount();
    }
  }
  componentWillUnmount() {
    const { error, componentStack } = this.state;
    const { onUnmount } = this.props;
    if (onUnmount) {
      onUnmount(error, componentStack);
    }
  }
  render() {
    const { fallback, children, customDialog } = this.props;
    const { error, componentStack, showingDialog } = this.state;
    if (error) {
      let element = void 0;
      if (typeof fallback === "function") {
        element = fallback({
          error,
          componentStack,
          resetError: this.resetErrorBoundary
        });
      } else {
        element = fallback;
      }
      if (React2.isValidElement(element)) {
        return /* @__PURE__ */ React2.createElement(React2.Fragment, null, showingDialog && /* @__PURE__ */ React2.createElement(
          ReportDialog,
          __spreadProps(__spreadValues({}, this.props.dialogOptions), {
            onCloseHandler: this.hideDialog,
            onSubmitHandler: this.onReportDialogSubmitHandler
          })
        ), element);
      }
      if (fallback) {
        console.warn("fallback did not produce a valid ReactElement");
      }
      if (showingDialog && customDialog) {
        return customDialog;
      }
      return showingDialog && /* @__PURE__ */ React2.createElement(
        ReportDialog,
        __spreadProps(__spreadValues({}, this.props.dialogOptions), {
          onCloseHandler: this.hideDialog,
          onSubmitHandler: this.onReportDialogSubmitHandler
        })
      );
    }
    if (typeof children === "function") {
      return children();
    }
    return children;
  }
};
function captureReactErrorBoundaryError(error, errorInfo) {
  var _a;
  const component = getComponentNameFromStack((_a = errorInfo.componentStack) != null ? _a : "");
  if (!window.H) {
    console.warn("You need to install highlight.run.");
  } else {
    console.error(
      "Highlight ErrorBoundary caught an exception while rendering React component",
      { error }
    );
    window.H.consume(error, {
      payload: { component },
      source: component,
      type: "React.ErrorBoundary"
    });
  }
}
function getComponentNameFromStack(componentStack) {
  const stack = componentStack.split("\n");
  if (stack.length < 1) {
    return void 0;
  }
  const leafComponentLine = stack[1].trim();
  const tokens = leafComponentLine.split(" ");
  if (tokens.length !== 4) {
    return void 0;
  }
  return `<${tokens[1]}>`;
}

// src/components/SampleBuggyButton.tsx
import React3 from "react";
var SampleBuggyButton = ({
  children
}) => {
  const [isError, setError] = React3.useState(false);
  if (isError) {
    throw new Error("something bad happened - this is a sample test error");
  }
  return /* @__PURE__ */ React3.createElement(
    "button",
    {
      type: "button",
      className: "buggyButton",
      onClick: () => setError(true)
    },
    children != null ? children : "Throw an Error"
  );
};
export {
  ErrorBoundary,
  ReportDialog,
  SampleBuggyButton
};
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)
*/
